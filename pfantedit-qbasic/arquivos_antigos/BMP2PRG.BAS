'''''''''''''''''''''''''''''''''''''''''''''''
' Program    : Loads 24-BIT BMPs in Screen 13 '
' Name       : BMP24BIT Version 1.0           '
' Programmer : Yousuf Philips                 '
' Company    : Y P I                          '
' Updated On : 16th of September 1999         '
' Email - [philipz85@hotmail.com]             '
' [http://members.xoom.com/Philipz/]          '
'''''''''''''''''''''''''''''''''''''''''''''''

'/*               Do not edit this file if you distribute it.              */'
'/*  (c) Copyrighted by YPI in 1999 | All Rights Reserved | Public Domain  */'

'/* This program has been created by YPI (Basic Programming Incorporation) */'
'/* as a utility to load 24-BIT BMPs in SCREEN 13.                         */'

'/* As stated in 24BITBMP.BAS, we all know that it is impossible to decode */'
'/* and display a 24-bit image on a 8-bit graphics screen 100% correct. So */'
'/* what has been done is that the first 256 unique colors in the image are*/'
'/* extracted and are used to make up a palette. Using this palette the    */'
'/* image is decoded. Most 24-bit BMPs will display OK with the current    */'
'/* settings, but if not increase the number of variable 'Variation' in    */'
'/* the Bmp24Bit SUB(routine). Hopefully the next version will be able to  */'
'/* adjust itself to any image and for decoding.                           */'

'/* One thing that I have to say, is that I am sorry for the delay in      */'
'/* releasing of this program's source code. It was created in 1998 and I  */'
'/* wanted to release it when people were demanding it, but it seems that  */'
'/* I need to start releasing more of my source code so that I may help    */'
'/* others with their work. Special thanks to Ian Barker.                  */'

'/* If you use any of this code in your program then you must credit YPI.  */'
'/* YPI has created an assortment of graphics loaders and players and they */'
'/* can all be found at <http://members.xoom.com/Philipz/>                 */'

DECLARE SUB Bmp24Bit (FileName$)
DECLARE SUB SetColor (ColorNumber%, Red%, Green%, Blue%)

'/* File format structures for BMP images.                                 */'
'/* For more details on the meanings of each variable see 24BITBMP.BAS.    */'
TYPE BMPHeader
   ValidID AS STRING * 2
   SizeOfFile AS LONG
   Reserved AS LONG
   OffsetOfBitMap AS LONG
END TYPE
TYPE WindowsBMPInfoHeader
   SizeOfHeader AS LONG
   Widthz AS LONG
   Heightz AS LONG
   Planes AS INTEGER
   BitsPerPixel AS INTEGER
   CompressMethod AS LONG
   ImageSizeInBytes AS LONG
   HorizontalResol AS LONG
   VerticalResol AS LONG
   ColorsUsed AS LONG
   ImportantColors AS LONG
END TYPE

CLS
SHELL "cd\"
SHELL "cd windows"
SHELL "cd desktop"
SHELL "cd pinball"

FILES "*.bmp"
PRINT " 24-BIT BMP Loader for QBASIC - BMP24BIT ver 1.0"
PRINT " (c) YPI (BASIC Programming Incorporation) 1999"
INPUT " Enter File Name - ", FileName$
FileName$ = "c:\windows\desktop\pinball\" + FileName$
IF INSTR(FileName$, ".bmp") = 0 THEN FileName$ = FileName$ + ".bmp"
CALL Bmp24Bit(FileName$)

file$ = "c:\games\jogos\pinball\fantasie\table1.prg"
OPEN file$ FOR BINARY AS #1
a$ = " "
pr = 340437
p = pr
x = 0
y = 0
0 c = POINT(x, y)
n = 1
1
x = x + 1
IF x > 319 THEN x = 0: y = y + 1: IF y > 142 THEN CLOSE #1: END

IF p - pr - 2 = 128 THEN
a$ = CHR$(p - pr - 2)
PUT #1, pr, a$
pr = p
p = p + 1
GOTO 0
END IF


IF POINT(x, y) = c THEN
 n = n + 1
 IF n = 127 THEN

  '**
  IF p - pr > 2 THEN
  a$ = CHR$(p - pr - 2)
  PUT #1, pr, a$
  END IF

  a$ = CHR$(257 - n)
  PUT #1, p, a$
  a$ = CHR$(c)
  PUT #1, p + 1, a$


  p = p + 2
  c = POINT(x, y)
  REM n = 1
  n = n - 127
  pr = p
  GOTO 1

  '**



 END IF

 GOTO 1
ELSE
2
 IF n = 1 THEN
  IF pr = p THEN a$ = CHR$(0): PUT #1, p, a$: p = p + 1
  a$ = CHR$(c)
  PUT #1, p, a$
  p = p + 1
  c = POINT(x, y)
 ELSE
  IF p - pr > 2 THEN
  a$ = CHR$(p - pr - 2)
  PUT #1, pr, a$
  END IF

  a$ = CHR$(257 - n)
  PUT #1, p, a$
  a$ = CHR$(c)
  PUT #1, p + 1, a$


  p = p + 2
  c = POINT(x, y)
  n = 1

  pr = p
  GOTO 1
 END IF
END IF
GOTO 1

DEFINT A-Z
SUB Bmp24Bit (FileName$)

DIM BMPHeader AS BMPHeader
DIM BMPInfoHeader AS WindowsBMPInfoHeader
DIM ColorPalArray(255, 3): ColorsInArray = 0
ColorPalArray(Loops, 1) = 0: ColorPalArray(Loops, 2) = 0
ColorPalArray(Loops, 3) = 0: Quality = 1: Variation = 3

OPEN FileName$ FOR BINARY AS #255
IF LOF(255) = 0 THEN
   PRINT : PRINT " File Is Empty"
   CLOSE #255: KILL FileName$
   EXIT SUB
END IF

GET #255, , BMPHeader
GET #255, , BMPInfoHeader

IF BMPInfoHeader.BitsPerPixel <> 24 THEN
   PRINT : PRINT " Not a 24-Bit BMP"
   CLOSE #255: EXIT SUB
END IF

LineExtract& = BMPInfoHeader.Widthz * 3
IF (4 - (LineExtract& MOD 4)) <> 4 THEN
   LineExtract& = LineExtract& + (4 - (LineExtract& MOD 4))
END IF
LineExtract$ = SPACE$(LineExtract&)

IF BMPInfoHeader.Heightz > 200 THEN HeightLimit = 199 ELSE HeightLimit = BMPInfoHeader.Heightz - 1
IF BMPInfoHeader.Widthz > 320 THEN WidthLimit = 319 ELSE WidthLimit = BMPInfoHeader.Widthz - 1

SCREEN 13
FOR YHeight = HeightLimit TO 0 STEP -1
   GET #255, 55 + (LineExtract& * (BMPInfoHeader.Heightz - 1)) - (LineExtract& * YHeight), LineExtract$
   FOR XWidth = 0 TO WidthLimit
       PixelBlue = ASC(MID$(LineExtract$, (XWidth * 3) + 1, 1)) \ (Quality * 4)
       PixelGreen = ASC(MID$(LineExtract$, (XWidth * 3) + 2, 1)) \ (Quality * 4)
       PixelRed = ASC(MID$(LineExtract$, (XWidth * 3) + 3, 1)) \ (Quality * 4)
       PixelSet = 0
       FOR Loops = 0 TO ColorsInArray
          IF PixelBlue >= ColorPalArray(Loops, 3) - Variation AND PixelBlue <= ColorPalArray(Loops, 3) + Variation THEN
             IF PixelGreen >= ColorPalArray(Loops, 2) - Variation AND PixelGreen <= ColorPalArray(Loops, 2) + Variation THEN
                IF PixelRed >= ColorPalArray(Loops, 1) - Variation AND PixelRed <= ColorPalArray(Loops, 1) + Variation THEN
                   PSET (XWidth, YHeight), Loops
                   PixelSet = 1
                   EXIT FOR
                END IF
             END IF
          END IF
       NEXT Loops
      
       IF PixelSet = 0 AND ColorsInArray < 255 THEN
          ColorsInArray = ColorsInArray + 1
          ColorPalArray(ColorsInArray, 1) = PixelRed
          ColorPalArray(ColorsInArray, 2) = PixelGreen
          ColorPalArray(ColorsInArray, 3) = PixelBlue
          CALL SetColor(ColorsInArray, PixelRed, PixelGreen, PixelBlue)
          PSET (XWidth, YHeight), ColorsInArray
       ELSE
          IF PixelSet = 0 THEN
             Movement = 0
             DO
                FOR Loops = 0 TO 255
                   IF PixelBlue >= (ColorPalArray(Loops, 3) - Movement) AND PixelBlue <= (ColorPalArray(Loops, 3) + Movement) THEN
                      IF PixelGreen >= (ColorPalArray(Loops, 2) - Movement) AND PixelGreen <= (ColorPalArray(Loops, 2) + Movement) THEN
                         IF PixelRed >= (ColorPalArray(Loops, 1) - Movement) AND PixelRed <= (ColorPalArray(Loops, 1) + Movement) THEN
                            PSET (XWidth, YHeight), Loops
                            EXIT DO
                         END IF
                      END IF
                   END IF
                NEXT Loops
                Movement = Movement + 1
             LOOP
          END IF
       END IF
   NEXT XWidth
NEXT YHeight

END SUB

SUB SetColor (ColorNumber, Red, Green, Blue)

OUT &H3C8, ColorNumber
OUT &H3C9, Red
OUT &H3C9, Green
OUT &H3C9, Blue

END SUB

